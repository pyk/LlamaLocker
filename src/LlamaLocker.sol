// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

import {IERC20} from "@openzeppelin/token/ERC20/ERC20.sol";
import {SafeERC20} from "@openzeppelin/token/ERC20/utils/SafeERC20.sol";
import {IERC721} from "@openzeppelin/token/ERC721/ERC721.sol";
import {ERC721Holder} from "@openzeppelin/token/ERC721/utils/ERC721Holder.sol";
import {Ownable, Ownable2Step} from "@openzeppelin/access/Ownable2Step.sol";
import {Math} from "@openzeppelin/utils/math/Math.sol";
import {SafeCast} from "@openzeppelin/utils/math/SafeCast.sol";

/**
 * @title Llama Locker
 * @author sepyke.eth
 * @dev Lock LLAMA to claim share of the yield generated by the treasury
 * @custom:credits LlamaLocker is inspired by CvxLockerV2
 */
contract LlamaLocker is ERC721Holder, Ownable2Step {
    using SafeERC20 for IERC20;
    using SafeCast for uint256;
    using Math for uint256;

    /// @dev Track reward state per token
    struct RewardState {
        uint208 rewardPerSecond;
        uint48 epochEndAt;
        uint208 rewardPerNFTStored;
        uint48 updatedAt;
    }

    /// @dev Epoch info
    struct Epoch {
        uint48 startAt;
    }

    /// @dev Per lock info per account
    struct Lock {
        uint48 unlockAt;
        uint8 amount;
    }

    /// @dev All lock info per account
    struct LockOverview {
        uint48 nextUnlockIndex;
        uint8 lockedAmount;
    }

    IERC721 public nft;
    Epoch[] private epochs;
    IERC20[] public rewardTokens;

    mapping(IERC20 => RewardState) private rewardStates;
    mapping(address => LockOverview) private accountLockOverviews;
    mapping(address => Lock[]) private acocuntLocks;
    mapping(address => mapping(IERC20 => uint256)) public rewards;
    mapping(address => mapping(IERC20 => uint256)) public accountRewardPerNFTPaid;
    mapping(uint256 tokenId => address owner) private nftOwners;

    uint256 public constant EPOCH_DURATION = 7 days;
    uint256 public constant LOCK_DURATION = EPOCH_DURATION * 4; // 4 epochs
    uint8 public totalLockedNFT;

    error RenounceInvalid();
    error RewardTokenExists();
    error RewardTokenNotExists();
    error RewardAmountInvalid();
    error LockZeroToken();
    error UnlockOwnerInvalid();
    error NoLockers();

    event RewardTokenAdded(IERC20 token);
    event RewardDistributed(IERC20 token, uint256 amount);
    event NFTLocked(address account, uint8 count);

    constructor(address owner_, address nft_) Ownable(owner_) {
        nft = IERC721(nft_);

        uint256 currentEpoch = (block.timestamp / EPOCH_DURATION) * EPOCH_DURATION;
        epochs.push(Epoch({startAt: currentEpoch.toUint48()}));
    }

    /// @dev This contract ain't gonna work without its owner, ya know?
    function renounceOwnership() public virtual override onlyOwner {
        revert RenounceInvalid();
    }

    //************************************************************//
    //                           Epoch                            //
    //************************************************************//
    function getEpoch(uint256 _index) external view returns (Epoch memory) {
        return epochs[_index];
    }

    //************************************************************//
    //                    Reward Token Manager                    //
    //************************************************************//

    function getRewardTokenCount() external view returns (uint256 count_) {
        count_ = rewardTokens.length;
    }

    function getRewardState(IERC20 token_) external view returns (RewardState memory data_) {
        data_ = rewardStates[token_];
    }

    /// @notice Add new reward token
    /// @param _token New reward token address
    function addRewardToken(IERC20 _token) external onlyOwner {
        if (rewardStates[_token].updatedAt > 0) revert RewardTokenExists();

        rewardTokens.push(_token);
        rewardStates[_token].updatedAt = block.timestamp.toUint48();
        rewardStates[_token].epochEndAt = block.timestamp.toUint48();

        emit RewardTokenAdded(_token);
    }

    /// @dev Calc ulate reward per locked NFT
    function _rewardPerNFT(IERC20 _token) internal view returns (uint256) {
        RewardState memory rewardState = rewardStates[_token];
        uint256 prevRewardPerNFT = uint256(rewardState.rewardPerNFTStored);
        uint256 epochEndAt = Math.min(uint256(rewardState.epochEndAt), block.timestamp);
        uint256 timeDelta = epochEndAt - uint256(rewardState.updatedAt);
        uint256 rewardPerNFT = (timeDelta * rewardState.rewardPerSecond) / totalLockedNFT;
        return prevRewardPerNFT + rewardPerNFT;
    }

    /// @dev Update reward states
    function _updateRewardStates() internal {
        for (uint256 i = 0; i < rewardTokens.length; i++) {
            IERC20 token = rewardTokens[i];
            rewardStates[token].rewardPerNFTStored = _rewardPerNFT(token).toUint208();
            rewardStates[token].updatedAt = Math.min(rewardStates[token].epochEndAt, block.timestamp).toUint48();
        }
    }

    /// @notice Distribute rewards to lockers
    /// @param _token The reward token address
    /// @param _amount The amount of reward token
    function distribute(IERC20 _token, uint256 _amount) external onlyOwner {
        if (rewardStates[_token].updatedAt == 0) revert RewardTokenNotExists();
        if (_amount == 0) revert RewardAmountInvalid();
        if (totalLockedNFT == 0) revert NoLockers();

        _updateRewardStates();

        RewardState storage rewardState = rewardStates[_token];
        if (block.timestamp >= rewardState.epochEndAt) {
            rewardState.rewardPerSecond = (_amount / EPOCH_DURATION).toUint208();
        } else {
            uint256 remaining = rewardState.epochEndAt - block.timestamp;
            uint256 leftover = remaining * rewardState.rewardPerSecond;
            rewardState.rewardPerSecond = ((_amount + leftover) / EPOCH_DURATION).toUint208();
        }

        rewardState.updatedAt = block.timestamp.toUint48();
        rewardState.epochEndAt = (block.timestamp + EPOCH_DURATION).toUint48();

        _token.safeTransferFrom(msg.sender, address(this), _amount);
        emit RewardDistributed(_token, _amount);
    }

    function _earned(address _account, IERC20 _token, uint256 _lockedAmount) internal view returns (uint256) {
        uint256 rewardPerNFTDiff = _rewardPerNFT(_token) - accountRewardPerNFTPaid[_account][_token];
        return (_lockedAmount * rewardPerNFTDiff) + rewards[_account][_token];
    }

    function _updateAccountReward(address _account) internal {
        LockOverview memory overview = accountLockOverviews[_account];
        for (uint256 i = 0; i < rewardTokens.length; i++) {
            IERC20 token = rewardTokens[i];
            RewardState memory rewardState = rewardStates[token];
            rewards[_account][token] = _earned(_account, token, overview.lockedAmount);
            accountRewardPerNFTPaid[_account][token] = rewardState.rewardPerNFTStored;
        }
    }

    function _nextEpoch() internal view returns (uint256) {
        return ((block.timestamp / EPOCH_DURATION) * EPOCH_DURATION) + EPOCH_DURATION;
    }

    /// @dev Backfill epochs
    function _backfillEpochs() internal {
        uint256 nextEpoch = _nextEpoch();
        uint256 epochindex = epochs.length;

        if (epochs[epochindex - 1].startAt < nextEpoch) {
            while (epochs[epochs.length - 1].startAt != nextEpoch) {
                uint256 nextStartAt = epochs[epochs.length - 1].startAt + EPOCH_DURATION;
                epochs.push(Epoch({startAt: nextStartAt.toUint48()}));
            }
        }
    }

    /// @dev Locked NFT cannot be withdrawn for LOCK_DURATION_IN_EPOCH and are eligible to receive share of yields
    function lock(uint256[] calldata tokenIds_) external {
        uint8 tokenCount = tokenIds_.length.toUint8();
        if (tokenCount == 0) revert LockZeroToken();

        _backfillEpochs();

        for (uint8 i = 0; i < tokenCount; ++i) {
            nft.safeTransferFrom(msg.sender, address(this), tokenIds_[i]);
            nftOwners[tokenIds_[i]] = msg.sender;
        }

        // TODO(pyk): check implementation below

        _updateRewardStates();
        _updateAccountReward(msg.sender);

        // Increase total locked NFT
        totalLockedNFT += tokenCount;
        LockOverview storage lockOverview = accountLockOverviews[msg.sender];
        lockOverview.lockedAmount += tokenCount;

        uint256 nextEpoch = _nextEpoch();
        uint256 unlockAt = nextEpoch + LOCK_DURATION;
        acocuntLocks[msg.sender].push(Lock({amount: tokenCount, unlockAt: unlockAt.toUint48()}));

        emit NFTLocked(msg.sender, tokenCount);
    }

    function unlock(uint256[] calldata tokenIds_) external {
        uint8 tokenCount = tokenIds_.length.toUint8();
        if (tokenCount == 0) revert LockZeroToken();

        // Decrease total locked NFT
        totalLockedNFT -= tokenCount;

        for (uint8 i = 0; i < tokenCount; ++i) {
            if (nftOwners[tokenIds_[i]] != msg.sender) revert UnlockOwnerInvalid();
            nft.safeTransferFrom(address(this), msg.sender, tokenIds_[i]);
        }
    }
}
